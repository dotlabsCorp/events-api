# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  fullName: String!
  email: String!
  roles: [ValidRoles!]!
  walletAddress: String!
  isBlocked: Boolean!
  lastUpdatedBy: User
}

"""Valid Role type (ADMIN, USER, SUPER_USER)"""
enum ValidRoles {
  ADMIN
  USER
  SUPER_USER
}

type AuthResponse {
  token: String!
  user: User!
}

type Consultancy {
  id: ID!
  fullName: String!
  email: String!
  phoneNumber: String!
  description: String!
}

type SpeakerObject {
  url: String
  name: String!
}

type DateObject {
  url: String
  datetime: String!
}

type LocationObject {
  url: String
  name: String!
}

type Event {
  id: ID!
  title: String!
  speakers: [SpeakerObject!]!
  description: String!
  date: DateObject!
  tags: [String!]!
  location: LocationObject!
  type: EventType!
  imageUrl: String
}

enum EventType {
  WOKRSHOP
  TERTULIA
}

type AggregationType {
  total: Int!
  incoming: Int!
}

type Query {
  """Get one event"""
  findOneEvent(id: ID!): Event!

  """Get all events"""
  findAllEvents(
    """The name of the speaker of the events to find."""
    name: String

    """The title of the events to find."""
    title: String

    """
    The date of the events to find. Returns all events after or equal to date.
    """
    date: String
  ): [Event!]!

  """Get the count of all events and incoming events"""
  count: AggregationType!
  countAll: Int!
  incomingEvents: Int!
  users(roles: [ValidRoles!] = []): [User!]!
  getOneUser(id: ID!): User!
  revalidate: AuthResponse!
  getConsultancies: [Consultancy!]!
  getOneConsultancy(id: ID!): User!
}

type Mutation {
  """
  Create one event. Returns true if successful. Otherwise, returns false.
  """
  createEvent(createEvent: CreateEventInput!): Event!

  """
  Update one event. Returns true if successful. Otherwise, returns false.
  """
  updateEvent(id: ID!, updateEvent: UpdateEventInput!): Event!

  """
  Delete one event. Returns true if successful. Otherwise, returns false.
  """
  deleteEvent(id: ID!): Boolean!
  updateUser(updateUserInput: UpdateUserInput!): User!
  blockUser(id: ID!): Boolean!
  removeUser(id: ID!): Boolean!
  signUp(signUp: SignUpInput!): AuthResponse!
  signIn(signIn: SignInInput!): AuthResponse!
  createConsultancy(createConsultancyInput: CreateConsultancyInput!): Boolean!
  updateConsultancy(updateConsultancy: UpdateConsultancyInput!): Boolean!
}

input CreateEventInput {
  title: String!
  speakers: [SpeakerInput!]!
  description: String!
  date: DateInput!
  tags: [String!]!
  location: LocationInput!
  type: EventType!
  imageUrl: String!
}

input SpeakerInput {
  url: String
  name: String!
}

input DateInput {
  url: String
  datetime: String!
}

input LocationInput {
  url: String
  name: String!
}

input UpdateEventInput {
  title: String
  speakers: [SpeakerInput!]
  description: String
  date: DateInput
  tags: [String!]
  location: LocationInput
  type: EventType
  imageUrl: String
}

input UpdateUserInput {
  fullName: String
  email: String
  password: String
  walletAddress: String
  id: String!
  roles: [ValidRoles!]
  isBlocked: Boolean
}

input SignUpInput {
  walletAddress: String!
  email: String!
  fullName: String!
  password: String!
}

input SignInInput {
  walletAddress: String!
  email: String!
  password: String!
}

input CreateConsultancyInput {
  fullName: String!
  email: String!
  phoneNumber: String!
  description: String!
}

input UpdateConsultancyInput {
  fullName: String
  email: String
  phoneNumber: String
  description: String
  id: String!
}